--log
Option Compare Database
Option Explicit
Dim msg_str As String

Public Function Write_log(msg_type As Integer, Msg As String, Optional Silence As Byte = 1) As String
        'silence, not to msgbox in the end,1 to announce, 0 to silently log
         If msg_type = 111 Then
           msg_str = "[Attention]"
        End If
        If msg_type = 911 Then
           msg_str = "[Alert]"
        End If
        If msg_type = 1 Then
           msg_str = "[Insert]"
        End If
        If msg_type = -1 Then
           msg_str = "[Delete]"
        End If
        If msg_type = 0 Then
            msg_str = "[ERROR]"
        End If
        If msg_type = 2 Then
            msg_str = "[Reminder]" 'or used as email reminder
        End If
        If msg_type = 3 Then
            msg_str = "[Update]"
        End If
        If msg_type = -2 Then
           msg_str = "[Inactivate]"
        End If

    log_type = msg_type
    msg_str = msg_str & " " & Msg
   
    Dim strSQL As String
    Dim conn As New adodb.Connection
    conn.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;" & _
                            "Data Source=" & GetAddress("O", 0)
    conn.Open
    strSQL = "INSERT INTO tbLog ([DateTime], [Auditor], [ComputerName], [LogType], [Notes])" _
             & "Values ('" & Now() & "','" & getuser() & "','" & getcomputer() & "','" & gettype() & "','" & Replace(getmsg_str(), "'", "''") & "')"
    
    conn.Execute strSQL
    
    If Silence = 1 Then
        MsgBox "Log has been written", vbOKOnly, "Log"
    End If

End Function
Public Function getuser() As String
 getuser = Environ("username")
End Function
Public Function getcomputer() As String
 getcomputer = Environ("ComputerName")
End Function
Public Function gettype() As String
 gettype = log_type
End Function
Public Function getmsg_str() As String
getmsg_str = msg_str
End Function

========================================================================================
--Parameter-OrderID,CustomerID,msg_str,TimeStamp 
Option Compare Database
Option Explicit

Public G_OrderID As Long
Public G_CustomerID As String
Public G_ShipperID As Integer
Public G_ProductID As Long
Public G_CountryName As String
Public G_RegionName As String
Public G_ShipCoName As String
Public G_ContactTitle As String
Public G_UnitPrice As Currency

Public G_CustomerSet As New adodb.Recordset
Public G_CountrySet As New adodb.Recordset
Public G_RegionSet As New adodb.Recordset
Public G_ContactTitleSet As New adodb.Recordset


Public msg_str As String 'the parameter for WriteLog
Public log_type As Integer

Public Switch As Boolean
Public Found As Boolean ' to indicate the result is found or not
Public AddNewWhenInsert As Boolean
Public AddtoExistingOrder As Boolean 'to switch on when details are added to an existing order

Public Const NumberofDBs = 5

Public CheckInactiveCustomerID As Boolean 'check before populate if one certain CustomerID IS ACTIVE OR NOT,THEN determine in grey or not
Public CheckInactiveOrderID As Boolean
Public Active As Byte '1=for active Customers only;    2=for all customers
Public FilterSet As adodb.Recordset 'to generate a filterSet for CustomerID Dropdown list as the client types
 
Public RandomString As String

Public TimeStamp As Double 'the parameter for reference Number
=======================================================================
--Public Functions, Get Number
Option Compare Database
Option Explicit
Function GetString(Length As Integer)
    'PURPOSE: Create a Randomized String of Characters
    'SOURCE: www.TheSpreadsheetGuru.com/the-code-vault
    Dim CharacterBank As Variant
    Dim x As Integer
    Dim str As String

    CharacterBank = Array("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", _
      "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", _
      "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "!", "@", _
      "#", "$", "%", "^", "&", "*", "A", "B", "C", "D", "E", "F", "G", "H", _
      "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", _
      "W", "X", "Y", "Z")
      

    'Randomly Select Characters One-by-One
    For x = 1 To Length
      str = str & CharacterBank(Int((UBound(CharacterBank) - LBound(CharacterBank) + 1) * Rnd + LBound(CharacterBank)))
    Next x
    
    'Output Randomly Generated String
    RandomString = str
    GetString = RandomString
End Function
Public Function Get_DT() As String

    Dim DT_Date As Date
    Dim DT_String As String
    
    'get the current date-time in variable
    DT_Date = Now
    
    'determine the weekday in "www" format
    Select Case Weekday(DT_Date)
        Case 1
            DT_String = "Sunday"
        Case 2
            DT_String = "Monday"
        Case 3
            DT_String = "Tuesday"
        Case 4
            DT_String = "Wednesday"
        Case 5
            DT_String = "Thursday"
        Case 6
            DT_String = "Friday"
        Case 7
            DT_String = "Saturday"
    End Select
 
    'to return the value as a string of long date
    Get_DT = DT_String & " " & Format(DT_Date, "YYYY-MM-DD HH:MM:SS")
    
    
End Function
Public Function GetAddress(a As String, i As Integer) As String
    If a = "O" And i = 0 Then
        GetAddress = "C:\Users\...\Orders_DB.accdb"
    Else
        GetAddress = "C:\Users\...\OrderDetails_" & i & ".accdb"
    End If
    
End Function
Public Function getMinNumber() As Long 'to get Min(OrderID)
    Dim sql As String
    sql = "Select min(OrderID) from Orders where Status is null"
    Dim rs As adodb.Recordset
    
    Dim conn As adodb.Connection
    Set conn = New adodb.Connection
    conn.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;" & _
                            "Data Source=" & GetAddress("O", 1)
                            
    conn.Open
    Set rs = New adodb.Recordset
    rs.Open sql, conn, adOpenDynamic, adLockBatchOptimistic

    getMinNumber = rs.Fields(0).Value
    

End Function
Public Function getNumber() As Long 'to get Max(OrderID)+1
    Dim sql As String
    sql = "Select Max(OrderID)+1 from Orders "
    Dim rs As adodb.Recordset
    Set rs = New adodb.Recordset
    Dim conn As adodb.Connection
    Set conn = New adodb.Connection
    conn.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;" & _
                            "Data Source=" & GetAddress("O", NumberofDBs)
                            
    conn.Open

    rs.Open sql, conn, adOpenDynamic, adLockBatchOptimistic
    
    G_OrderID = rs.Fields(0).Value
    getNumber = G_OrderID

End Function

Public Function getCount() As Long
    Dim sql As String
    sql = "Select Count(*) from Orders where Status is null"
    Dim rs As adodb.Recordset
    Dim conn As adodb.Connection
    Dim Count As Long
    Count = 0
    Dim i As Integer
    For i = 1 To NumberofDBs
        Set conn = New adodb.Connection
        conn.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;" & _
                                "Data Source=" & GetAddress("O", i)                            
        conn.Open
        Set rs = New adodb.Recordset
        rs.CursorLocation = adUseClient
        rs.Open sql, conn, 1, 1
        Count = Count + rs.Fields(0).Value
    Next i
    
    getCount = Count

End Function
Public Function getDBnumber(OrderNumber As Long) As Byte
    'for OrderID
    'DB1:1-1015676; DB2:1015677-2031352; DB3:2031353-3047028; DB4:3047029-4062704; DB5: 4062705~~
    Select Case OrderNumber
        Case Is < 1015677
            getDBnumber = 1
        Case 1015677 To 2031352
            getDBnumber = 2
        Case 2031353 To 3047028
            getDBnumber = 3
        Case 3047029 To 4062704
            getDBnumber = 4
        Case Is > 4062704
            getDBnumber = 5
    End Select
    
End Function
Public Function getG_ComboSet(ActiveCondition As Byte, ComboSet As adodb.Recordset, TableName As String, Column1 As String, Column2 As String)
 
    Dim conn As adodb.Connection
    Set conn = New adodb.Connection
    ' fetch data from External Access DBs
    conn.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;" & _
                            "Data Source=" & GetAddress("O", 0)
                        
    conn.Open
    Dim sql As String
    If ActiveCondition = 1 Then 'fectch active data only
        sql = "SELECT " & Column1 & " , " & Column2 & _
            " FROM " & TableName & " Where status is null "
    Else 'fetch all data
        sql = "SELECT " & Column1 & " , " & Column2 & _
            " FROM " & TableName ' dont exclude the inactive customers out,can use grey color or add some mark statement when populate
    End If
    Set ComboSet = New adodb.Recordset ' to link "conn.open" to "rs.open"
    ComboSet.CursorLocation = adUseClient 'adUseClient and adOpenDynamic, adLockPessimistic for set cbobox.recordset=CustomerSet
    ComboSet.Open sql, conn, adOpenStatic, adLockPessimistic
    Set getG_ComboSet = ComboSet

End Function
Public Function EquipCustomerID(ActiveCustomerSet As Byte)  'for cbo box of CustomerID
    'activeCustomerSet=1, only activeCustomer
    Dim CustomerSet As adodb.Recordset
    Dim conn As adodb.Connection
    Set conn = New adodb.Connection
    ' fetch data from External Access DBs
    conn.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;" & _
                            "Data Source=" & GetAddress("O", 0)
                        
    conn.Open
    Dim sql As String
    If ActiveCustomerSet = 1 Then 'fectch active data only
        sql = "SELECT CustomerID, CompanyName " & _
            "FROM Customers Where status is null "
    Else 'fetch all data
        sql = "SELECT CustomerID, CompanyName " & _
            "FROM Customers " ' dont exclude the inactive customers out,can use grey color or add some mark statement when populate
    End If
    Set CustomerSet = New adodb.Recordset ' to link "conn.open" to "rs.open"
    CustomerSet.CursorLocation = adUseClient 'adUseClient and adOpenDynamic, adLockPessimistic for set cbobox.recordset=CustomerSet
    CustomerSet.Open sql, conn, adOpenStatic, adLockPessimistic
    Set G_CustomerSet = CustomerSet
    Set G_CustomerSet.ActiveConnection = Nothing
    conn.Close

End Function
Public Function CheckInactiveOrderIDs(newOrderID As Long)
    Dim conn As New adodb.Connection
    Dim rs As New adodb.Recordset
    Dim DB1 As Integer
    DB1 = getDBnumber(newOrderID)
    conn.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;" & _
                        "Data Source=" & GetAddress("OD", DB1)
    conn.Open
    
    Dim sql As String
    
    sql = "Select OrderID, Status from Orders " & _
        " Where OrderID=" & G_OrderID
    '---------------------------------
    rs.CursorLocation = adUseClient
    rs.Open sql, conn, adOpenStatic, adLockBatchOptimistic
    If rs.RecordCount = 0 Then 'no such OrderID
        CheckInactiveOrderID = True
    ElseIf IsNull(rs.Fields(1)) = False Then
    'inactive OrderID
        CheckInactiveOrderID = True
    Else
        CheckInactiveOrderID = False
    End If
End Function
Public Function CheckInactiveCustomerIDs(newCustomerID As String)

    Dim rs As adodb.Recordset
    Dim conn As adodb.Connection
    Set conn = New adodb.Connection
    ' fetch data from External Access DBs
    conn.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;" & _
                            "Data Source=" & GetAddress("O", 0)
                           
    conn.Open
    
    Set rs = New adodb.Recordset ' to link "conn.open" to "rs.open"
    Dim sql As String
    sql = "SELECT Status " & _
            "FROM Customers Where " & _
            " CustomerID='" & Replace(newCustomerID, "'", "''") & "'"
            'to find out if the newCustomerID is inactive or not

    rs.CursorLocation = adUseClient 'adUseClient and adOpenDynamic, adLockPessimistic for set cbobox.recordset=CustomerSet
    rs.Open sql, conn, adOpenDynamic, adLockPessimistic
    
    If IsNull(rs.Fields(0)) = True Then 'means newCustomerID is active
        CheckInactiveCustomerID = False
        Exit Function 'do nothing
    Else
        CheckInactiveCustomerID = True 'the newCustomerID is really inactive
    End If
End Function
Public Function CheckInputWithPK(TableName As String, newInput As String, ColumnName As String, cbo As Control, Optional G_Parameter As String)
    Dim rs As adodb.Recordset
    Dim conn As adodb.Connection   'CheckInputWithPK "Customers", G_CustomerID, "CustomerID", txtCustomerID
    Set conn = New adodb.Connection
    ' fetch data from External Access DBs
    Dim i As Integer
    If G_Parameter = "G_OrderID" Then
        
        i = getDBnumber(G_OrderID)
        conn.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;" & _
                            "Data Source=" & GetAddress("OD", i)
    Else
    
        conn.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;" & _
                            "Data Source=" & GetAddress("O", 0)
    End If
                           
    conn.Open
    
    Set rs = New adodb.Recordset ' to link "conn.open" to "rs.open"
    rs.CursorLocation = adUseServer 'adUseClient and adOpenDynamic, adLockPessimistic for set cbobox.recordset=CustomerSet
    rs.Open TableName, conn, adOpenKeyset, adLockOptimistic, adCmdTableDirect
    rs.MoveFirst
    rs.Index = "PrimaryKey"
    rs.Seek newInput
    If rs.EOF = True Then
        Found = False
        'MsgBox "This " & ColumnName & " is not valid. Please check again.", vbOKOnly
        cbo.Value = ""
    Else
        Found = True
    End If
   
End Function
Public Function GetBoundColumnValue(BoundColumn As String, TableName As String, SearchColumn As String, newInput As String, Optional G_Parameter As String, Optional a As Variant)
'this function can also be used to check unbound columns' value
    Dim conn As New adodb.Connection
    Dim rs As New adodb.Recordset
    conn.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;" & _
                        "Data Source=" & GetAddress("O", 0)
    conn.Open
    
    Dim sql As String
    If IsNumeric(newInput) = True Then
        sql = "Select " & BoundColumn & " from " & TableName & _
        " WHERE " & SearchColumn & "=" & newInput
    Else
        sql = "Select " & BoundColumn & " from " & TableName & _
            " WHERE " & SearchColumn & "='" & newInput & "'"
    End If
    
    '---------------------------------
    rs.CursorLocation = adUseClient
    rs.Open sql, conn, adOpenStatic, adLockBatchOptimistic
    '---------------------------------
    If rs.RecordCount = 0 Then
    'means no matching value in the boundcolumn
        G_Parameter = ""
       
    Else
        G_Parameter = rs.Fields(0)
        a = rs.Fields(0)
    End If
    
End Function
Public Function getCustomersCount(optionButtons As Byte) As Long
    Dim sql As String
    If optionButtons = 1 Then 'search for actively only
        sql = "Select Count(*) from Customers where Status is null"
    Else
        sql = "Select Count(*) from Customers "
    End If
    Dim conn As adodb.Connection
    Dim rs As adodb.Recordset
    Set conn = New adodb.Connection
    conn.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;" & _
                        "Data Source=" & GetAddress("O", 0)
    
    conn.Open
    Set rs = New adodb.Recordset
    rs.Open sql, conn
    Dim n As Long
    n = rs.Fields(0).Value
    getCustomersCount = n
End Function
Public Function CheckActive(FormName As String) As Byte
    Dim frm As Form
    Set frm = Forms(FormName)
    
    If frm.OptButton.Value = 1 Then
        Active = 1
        
    Else
        Active = 2
    End If
End Function
Public Function FilterRecsetAsYouType(rs As adodb.Recordset, cbo As ComboBox, Optional Column1 As String, Optional Column2 As String)
    If IsNumeric(cbo.Text) Then
        rs.Filter = Column1 & " like " & cbo.Text & "*"
    Else
        rs.Filter = Column1 & " like *" & Replace(cbo.Text, "'", "''") & "*" Or Column2 & " like *" & Replace(cbo.Text, "'", "''") & "*"
    End If
End Function
Public Function FilterCboAsYouType(rs As adodb.Recordset, cbo As ComboBox, sql As String, Optional Column1 As String, Optional Column2 As String, Optional Column3 As String, Optional Column4 As String, Optional Active As Byte = 2)
    'Column1 for number
    'column2~4 for text or date
    
    ' this is to AutoExpand when user is typing in the textpart
    Dim conn As adodb.Connection
    Dim strSQL As String
    strSQL = sql
    If Len(cbo.Text) > 0 Then
    
        If Active = 1 Then 'active only
            If IsNumeric(cbo.Text) And Column1 <> "" Then 'if user typed a number
                    strSQL = strSQL & Column1 & " LIKE '%" & cbo.Text & "%' AND Status is null"
            Else 'if users typed anything
                If Column2 <> "" Then
                    strSQL = strSQL & "( " & Column2 & " LIKE '%" & Replace(cbo.Text, "'", "''") & "%'"
                End If
                If Column3 <> "" Then
                    strSQL = strSQL & " or " & Column3 & " LIKE '%" & Replace(cbo.Text, "'", "''") & "%'"
                End If
                If Column4 <> "" Then
                    strSQL = strSQL & " or " & Column4 & " LIKE '%" & Replace(cbo.Text, "'", "''") & "%'"
                End If
                strSQL = strSQL & ") and status is null"
            End If
        End If
        If Active = 2 Then 'all
            If IsNumeric(cbo.Text) And Column1 <> "" Then 'if user typed a number
                If Column1 <> "" Then
                    strSQL = strSQL & Column1 & " LIKE '%" & cbo.Text & "%' "
                End If
            Else 'if users typed anything
                If Column2 <> "" Then
                    strSQL = strSQL & "( " & Column2 & " LIKE '%" & Replace(cbo.Text, "'", "''") & "%'"
                End If
                If Column3 <> "" Then
                    strSQL = strSQL & " or " & Column3 & " LIKE '%" & Replace(cbo.Text, "'", "''") & "%'"
                End If
                If Column4 <> "" Then
                    strSQL = strSQL & " or " & Column4 & " LIKE '%" & Replace(cbo.Text, "'", "''") & "%'"
                End If
                strSQL = strSQL & ") "
            End If
        End If
            
    Else
        Set FilterSet = rs 'This is the default recordset of combo box
        Exit Function
    End If
    
    Set conn = New adodb.Connection
    conn.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;" & _
                        "Data Source=" & GetAddress("O", 0)
                       
    conn.Open
    Set FilterSet = New adodb.Recordset ' to link "conn.open" to "rs.open"
    FilterSet.CursorLocation = adUseClient 'adUseClient and adOpenDynamic, adLockPessimistic for set cbobox.recordset=CustomerSet
    FilterSet.Open strSQL, conn, adOpenDynamic, adLockPessimistic
    

End Function
Public Function EquipCountry()  'for cbo box of ShipCountry
    
    Dim CountrySet As adodb.Recordset
    Dim conn As adodb.Connection
    Set conn = New adodb.Connection
    ' fetch data from External Access DBs
    conn.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;" & _
                            "Data Source=" & GetAddress("O", 0)
                        
    conn.Open
    Dim sql As String
    sql = "SELECT  Country, CountryID FROM Countrylist"

    Set CountrySet = New adodb.Recordset ' to link "conn.open" to "rs.open"
    CountrySet.CursorLocation = adUseClient 'adUseClient and adOpenDynamic, adLockPessimistic for set cbobox.recordset=CustomerSet
    CountrySet.Open sql, conn, adOpenDynamic, adLockPessimistic
    Set G_CountrySet = CountrySet
    
End Function
Public Function EquipContactTitle()  'for cbo box of TxtContactTitle
    Dim ContactTitleSet As adodb.Recordset
    Dim conn As adodb.Connection
    Set conn = New adodb.Connection
    ' fetch data from External Access DBs
    conn.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;" & _
                            "Data Source=" & GetAddress("O", 0)
                        
    conn.Open
    Dim sql As String
    sql = "SELECT distinct ContactTitle FROM Customers where ContactTitle is not null"

    Set ContactTitleSet = New adodb.Recordset ' to link "conn.open" to "rs.open"
    ContactTitleSet.CursorLocation = adUseClient 'adUseClient and adOpenDynamic, adLockPessimistic for set cbobox.recordset=CustomerSet
    ContactTitleSet.Open sql, conn, adOpenDynamic, adLockPessimistic
    Set G_ContactTitleSet = ContactTitleSet
    
End Function
Public Function EquipRegion(Optional a As String) 'for cbo box of ShipRegion
    
    Dim RegionSet As adodb.Recordset
    Dim conn As adodb.Connection
    Set conn = New adodb.Connection
    ' fetch data from External Access DBs
    conn.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;" & _
                            "Data Source=" & GetAddress("O", 0)
                        
    conn.Open
    Dim sql As String
    If a = "" Then
        sql = "SELECT Regions FROM Region WHERE Country=''"
    Else
        sql = "SELECT Regions FROM Region WHERE Country='" & a & "'"
    End If

    Set RegionSet = New adodb.Recordset ' to link "conn.open" to "rs.open"
    RegionSet.CursorLocation = adUseClient 'adUseClient and adOpenDynamic, adLockPessimistic for set cbobox.recordset=CustomerSet
    RegionSet.Open sql, conn, adOpenDynamic, adLockPessimistic
    Set G_RegionSet = RegionSet
        

End Function
Public Function Get_Color1() As String

    Dim DT_Date As Date
    Dim DT_Color As String
    
    DT_Date = Now
    
    Select Case Weekday(DT_Date)
        Case 1, 7
            DT_Color = RGB(219, 208, 167)
        Case 2 To 6
            DT_Color = RGB(185, 227, 217)
    End Select
    
    Get_Color1 = DT_Color
    
End Function
Public Function Get_Color2() As String

    Dim DT_Date As Date
    Dim DT_Color As String
    
    DT_Date = Now
    
    Select Case Weekday(DT_Date)
        Case 1, 7
            DT_Color = RGB(230, 155, 3)
        Case 2 To 6
            DT_Color = RGB(243, 244, 246)
    End Select
    
    Get_Color2 = DT_Color
    
End Function
Public Function Get_Color3() As String

    Dim DT_Date As Date
    Dim DT_Color As String
    
    DT_Date = Now
    
    Select Case Weekday(DT_Date)
        Case 1, 7
            DT_Color = RGB(225, 238, 210)
        Case 2 To 6
            DT_Color = RGB(173, 195, 192)
    End Select
    
    Get_Color3 = DT_Color
    
End Function
Public Function Get_Color4() As String

    Dim DT_Date As Date
    Dim DT_Color As String
    
    DT_Date = Now
    
    Select Case Weekday(DT_Date)
        Case 1, 7
            DT_Color = RGB(18, 53, 85)
        Case 2 To 6
            DT_Color = RGB(87, 96, 105)
    End Select
    
    Get_Color4 = DT_Color
    
End Function
Public Function Get_Color5() As String

    Dim DT_Date As Date
    Dim DT_Color As String
    
    DT_Date = Now
    
    Select Case Weekday(DT_Date)
        Case 1, 7
            DT_Color = RGB(209, 73, 78)
        Case 2 To 6
            DT_Color = RGB(247, 68, 97)
    End Select
    
    Get_Color5 = DT_Color
    
End Function

'create a timestamp function to generate the OrderID
Public Function getReferenceNumber() As Double
'Dim TimeStamp As Double
'here due to the limit of table space in ACCESS, i cant change the data type to double
TimeStamp = DateDiff("s", #1/1/1970#, Now()) '& Int((99998 - 10000 + 1) * Rnd + 10000)
getReferenceNumber = TimeStamp
End Function

======================================================================================
--SendingEmails
Option Compare Database
Option Explicit
Public Sub SendEmails(FormName As String, G_Parameter As String, CboboxName As String, newData As String, Optional AttachmentPath)
    Dim AppOutlook As Outlook.Application
    Dim MsgOutlook As Outlook.MailItem
    Dim Recipient As Outlook.Recipient
    Dim Attachment As Outlook.Attachment
    
    'Create the Outlook session.
    Set AppOutlook = CreateObject("Outlook.Application")
    
    'Create the message.
    Set MsgOutlook = AppOutlook.CreateItem(olMailItem)
    
    With MsgOutlook
    'Add the To recipient(s) to the message.
    Set Recipient = .Recipients.Add("AccessCoop2021@outlook.com")
    Recipient.Type = olTo
    
    'Add the CC recipient(s) to the message.
    Set Recipient = .Recipients.Add("JuliaR0621@outlook.com")
    Recipient.Type = olCC
    
    'Set the Subject, Body, and Importance of the message.
    .Subject = "[111]Attention: Asking for permission to add new items. " _
            & "Reference Number: " & TimeStamp
    .Body = FormName & ", ID=" & G_Parameter & vbCrLf & vbCrLf _
            & "New Item for " & CboboxName & " is " & newData & "."
    .Importance = olImportanceHigh  'High importance
    
    'Add attachments to the message.
    If Not IsMissing(AttachmentPath) Then
    Set Attachment = .Attachments.Add(AttachmentPath)
    End If
    
    'Resolve each Recipient’s name.
    For Each Recipient In .Recipients
        Recipient.Resolve
        If Not Recipient.Resolve Then
        MsgOutlook.Display
        End If
    Next
    .Send
    
    End With
    Set MsgOutlook = Nothing
    Set AppOutlook = Nothing
End Sub
Public Sub SendEmailsUsingSendObject(FormName As String, G_Parameter As String, CboboxName As String, newData As String)
    getReferenceNumber
    
    Dim mailto As String
    Dim ccto As String
    Dim bccto As String
    mailto = "AccessCoop2021@outlook.com"
    ccto = "JuliaR0621@outlook.com"
    bccto = ""
    
    Dim Subject As String
    Dim Body As String
    
    Body = FormName & ", ID=" & G_Parameter & vbCrLf & vbCrLf _
            & "New Item for " & CboboxName & " is " & newData & "."
    Subject = "[111]Attention: Asking for permission to add new items. " _
                            & "Reference Number: " & TimeStamp
    On Error Resume Next
    'acFormatpdf will export the result of query into pdf format and will add the pdf as attachment
    'DoCmd.SendObject acSendForm, FormName, acFormatXLS, mailto, ccto, bccto, Body, Subject, , False
    DoCmd.SendObject , , , mailto, , , Subject, Body, , False
End Sub
Public Sub SendEmailsUsingOutPutTo(FormName As String)
    
    DoCmd.OutputTo acOutputForm, FormName, acFormatPDF, , True
    
End Sub

